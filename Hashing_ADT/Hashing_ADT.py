class Hash_Table:
    def __init__(self, M1, M2):
        self.table = [0] * M1
        self.M1 = M1
        self.M2 = M2
        self.count = 0

    def h(self, key, cnt):
        return ((key % self.M1) + cnt * (self.M2 - (key % self.M2))) % self.M1

    def insert(self, key):
        cnt = 0
        while True:
            if self.table[self.h(key, cnt)] == 0:
                self.table[self.h(key, cnt)] = key
                break
            else:
                cnt += 1

key = [512, 1, 513, 515, 4, 6, 7, 522, 524, 13, 525, 527, 535, 536, 541, 557, 560, 50, 56, 571, 574, 577, 580, 68, 583, 72, 77, 79, 81, 601, 89, 613, 614, 616, 110, 113, 628, 116, 121, 130, 135, 654, 658, 163, 677, 681, 173, 686, 692, 182, 705, 194, 716, 205, 722, 727, 217, 730, 734, 226, 742, 743, 753, 755, 757, 245, 252, 265, 778, 268, 274, 275, 795, 798, 301, 817, 818, 307, 829, 831, 833, 321, 324, 332, 845, 339, 342, 854, 858, 348, 353, 354, 360, 361, 362, 876, 365, 881, 376, 888, 894, 895, 896, 897, 387, 389, 390, 395, 398, 911, 913, 407, 920, 921, 412, 925, 418, 932, 936, 937, 940, 434, 439, 442, 956, 446, 958, 449, 968, 970, 461, 463, 977, 992, 491, 496, 503]
print(len(key))
ht = Hash_Table(151, 97)
print("M1: {}\nM2: {}".format(ht.M1, ht.M2))

for i in key:
    ht.insert(i)

print(ht.table)
